// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/packet.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Packet struct {
	SequenceId  uint32   `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Data        []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	AckStartSeq []uint32 `protobuf:"varint,3,rep,packed,name=ack_start_seq,json=ackStartSeq" json:"ack_start_seq,omitempty"`
	AckSeqCount []uint32 `protobuf:"varint,4,rep,packed,name=ack_seq_count,json=ackSeqCount" json:"ack_seq_count,omitempty"`
	BytesRead   uint64   `protobuf:"varint,5,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	ClientIds   []string `protobuf:"bytes,6,rep,name=client_ids,json=clientIds" json:"client_ids,omitempty"`
	WindowSize  uint32   `protobuf:"varint,7,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	Mtu         uint32   `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Close       bool     `protobuf:"varint,9,opt,name=close,proto3" json:"close,omitempty"`
}

func (m *Packet) Reset()      { *m = Packet{} }
func (*Packet) ProtoMessage() {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_packet_135322ebcf2203be, []int{0}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(dst, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetSequenceId() uint32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Packet) GetAckStartSeq() []uint32 {
	if m != nil {
		return m.AckStartSeq
	}
	return nil
}

func (m *Packet) GetAckSeqCount() []uint32 {
	if m != nil {
		return m.AckSeqCount
	}
	return nil
}

func (m *Packet) GetBytesRead() uint64 {
	if m != nil {
		return m.BytesRead
	}
	return 0
}

func (m *Packet) GetClientIds() []string {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

func (m *Packet) GetWindowSize() uint32 {
	if m != nil {
		return m.WindowSize
	}
	return 0
}

func (m *Packet) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Packet) GetClose() bool {
	if m != nil {
		return m.Close
	}
	return false
}

func init() {
	proto.RegisterType((*Packet)(nil), "pb.Packet")
}
func (this *Packet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet)
	if !ok {
		that2, ok := that.(Packet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SequenceId != that1.SequenceId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.AckStartSeq) != len(that1.AckStartSeq) {
		return false
	}
	for i := range this.AckStartSeq {
		if this.AckStartSeq[i] != that1.AckStartSeq[i] {
			return false
		}
	}
	if len(this.AckSeqCount) != len(that1.AckSeqCount) {
		return false
	}
	for i := range this.AckSeqCount {
		if this.AckSeqCount[i] != that1.AckSeqCount[i] {
			return false
		}
	}
	if this.BytesRead != that1.BytesRead {
		return false
	}
	if len(this.ClientIds) != len(that1.ClientIds) {
		return false
	}
	for i := range this.ClientIds {
		if this.ClientIds[i] != that1.ClientIds[i] {
			return false
		}
	}
	if this.WindowSize != that1.WindowSize {
		return false
	}
	if this.Mtu != that1.Mtu {
		return false
	}
	if this.Close != that1.Close {
		return false
	}
	return true
}
func (this *Packet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.Packet{")
	s = append(s, "SequenceId: "+fmt.Sprintf("%#v", this.SequenceId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "AckStartSeq: "+fmt.Sprintf("%#v", this.AckStartSeq)+",\n")
	s = append(s, "AckSeqCount: "+fmt.Sprintf("%#v", this.AckSeqCount)+",\n")
	s = append(s, "BytesRead: "+fmt.Sprintf("%#v", this.BytesRead)+",\n")
	s = append(s, "ClientIds: "+fmt.Sprintf("%#v", this.ClientIds)+",\n")
	s = append(s, "WindowSize: "+fmt.Sprintf("%#v", this.WindowSize)+",\n")
	s = append(s, "Mtu: "+fmt.Sprintf("%#v", this.Mtu)+",\n")
	s = append(s, "Close: "+fmt.Sprintf("%#v", this.Close)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacket(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.AckStartSeq) > 0 {
		dAtA2 := make([]byte, len(m.AckStartSeq)*10)
		var j1 int
		for _, num := range m.AckStartSeq {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.AckSeqCount) > 0 {
		dAtA4 := make([]byte, len(m.AckSeqCount)*10)
		var j3 int
		for _, num := range m.AckSeqCount {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacket(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.BytesRead != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.BytesRead))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WindowSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.WindowSize))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Mtu))
	}
	if m.Close {
		dAtA[i] = 0x48
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPacket(r randyPacket, easy bool) *Packet {
	this := &Packet{}
	this.SequenceId = uint32(r.Uint32())
	v1 := r.Intn(100)
	this.Data = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(10)
	this.AckStartSeq = make([]uint32, v2)
	for i := 0; i < v2; i++ {
		this.AckStartSeq[i] = uint32(r.Uint32())
	}
	v3 := r.Intn(10)
	this.AckSeqCount = make([]uint32, v3)
	for i := 0; i < v3; i++ {
		this.AckSeqCount[i] = uint32(r.Uint32())
	}
	this.BytesRead = uint64(uint64(r.Uint32()))
	v4 := r.Intn(10)
	this.ClientIds = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.ClientIds[i] = string(randStringPacket(r))
	}
	this.WindowSize = uint32(r.Uint32())
	this.Mtu = uint32(r.Uint32())
	this.Close = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPacket interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePacket(r randyPacket) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPacket(r randyPacket) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RunePacket(r)
	}
	return string(tmps)
}
func randUnrecognizedPacket(r randyPacket, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPacket(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPacket(dAtA []byte, r randyPacket, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePacket(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePacket(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceId != 0 {
		n += 1 + sovPacket(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if len(m.AckStartSeq) > 0 {
		l = 0
		for _, e := range m.AckStartSeq {
			l += sovPacket(uint64(e))
		}
		n += 1 + sovPacket(uint64(l)) + l
	}
	if len(m.AckSeqCount) > 0 {
		l = 0
		for _, e := range m.AckSeqCount {
			l += sovPacket(uint64(e))
		}
		n += 1 + sovPacket(uint64(l)) + l
	}
	if m.BytesRead != 0 {
		n += 1 + sovPacket(uint64(m.BytesRead))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	if m.WindowSize != 0 {
		n += 1 + sovPacket(uint64(m.WindowSize))
	}
	if m.Mtu != 0 {
		n += 1 + sovPacket(uint64(m.Mtu))
	}
	if m.Close {
		n += 2
	}
	return n
}

func sovPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Packet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Packet{`,
		`SequenceId:` + fmt.Sprintf("%v", this.SequenceId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`AckStartSeq:` + fmt.Sprintf("%v", this.AckStartSeq) + `,`,
		`AckSeqCount:` + fmt.Sprintf("%v", this.AckSeqCount) + `,`,
		`BytesRead:` + fmt.Sprintf("%v", this.BytesRead) + `,`,
		`ClientIds:` + fmt.Sprintf("%v", this.ClientIds) + `,`,
		`WindowSize:` + fmt.Sprintf("%v", this.WindowSize) + `,`,
		`Mtu:` + fmt.Sprintf("%v", this.Mtu) + `,`,
		`Close:` + fmt.Sprintf("%v", this.Close) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacket(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AckStartSeq = append(m.AckStartSeq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AckStartSeq = append(m.AckStartSeq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AckStartSeq", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AckSeqCount = append(m.AckSeqCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AckSeqCount = append(m.AckSeqCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSeqCount", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			m.WindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/packet.proto", fileDescriptor_packet_135322ebcf2203be) }

var fileDescriptor_packet_135322ebcf2203be = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x6e, 0xe2, 0x30,
	0x1c, 0xc6, 0x63, 0x02, 0x1c, 0x31, 0x87, 0xee, 0x64, 0xdd, 0x60, 0x9d, 0x74, 0xbe, 0x88, 0x29,
	0x4b, 0x61, 0xe8, 0xda, 0xa9, 0x9d, 0xd8, 0xaa, 0xf0, 0x00, 0x91, 0x63, 0xff, 0x4b, 0x23, 0x20,
	0x4e, 0xb0, 0x23, 0x54, 0xa6, 0x3e, 0x40, 0x87, 0x3e, 0x46, 0x1f, 0xa1, 0x8f, 0xd0, 0x91, 0x91,
	0xb1, 0x31, 0x4b, 0x47, 0xc6, 0x8e, 0x55, 0x1c, 0xb5, 0xdd, 0xbe, 0xef, 0xf7, 0x7d, 0xb6, 0x3e,
	0xfd, 0xf1, 0xaf, 0x22, 0x9d, 0x16, 0x5c, 0x2c, 0xc1, 0x4c, 0x8a, 0x8d, 0x32, 0x8a, 0x74, 0x8a,
	0xf4, 0xef, 0xd9, 0x22, 0x33, 0xb7, 0x55, 0x3a, 0x11, 0x6a, 0x3d, 0x5d, 0xa8, 0x85, 0x9a, 0xba,
	0x28, 0xad, 0x6e, 0x9c, 0x73, 0xc6, 0xa9, 0xf6, 0xc9, 0xf8, 0xa1, 0x83, 0xfb, 0xd7, 0xee, 0x0f,
	0xf2, 0x1f, 0x0f, 0x35, 0x94, 0x15, 0xe4, 0x02, 0x92, 0x4c, 0x52, 0x14, 0xa2, 0x68, 0x14, 0xe3,
	0x4f, 0x34, 0x93, 0x84, 0xe0, 0xae, 0xe4, 0x86, 0xd3, 0x4e, 0x88, 0xa2, 0x9f, 0xb1, 0xd3, 0x64,
	0x8c, 0x47, 0x5c, 0x2c, 0x13, 0x6d, 0xf8, 0xc6, 0x24, 0x1a, 0x4a, 0xea, 0x87, 0x7e, 0x34, 0x8a,
	0x87, 0x5c, 0x2c, 0xe7, 0x0d, 0x9b, 0x43, 0xf9, 0xd5, 0x81, 0x32, 0x11, 0xaa, 0xca, 0x0d, 0xed,
	0x7e, 0x77, 0xa0, 0xbc, 0x6a, 0x10, 0xf9, 0x87, 0x71, 0x7a, 0x67, 0x40, 0x27, 0x1b, 0xe0, 0x92,
	0xf6, 0x42, 0x14, 0x75, 0xe3, 0xc0, 0x91, 0x18, 0xb8, 0x6c, 0x62, 0xb1, 0xca, 0x20, 0x37, 0x49,
	0x26, 0x35, 0xed, 0x87, 0x7e, 0x14, 0xc4, 0x41, 0x4b, 0x66, 0x52, 0x37, 0xd3, 0xb7, 0x59, 0x2e,
	0xd5, 0x36, 0xd1, 0xd9, 0x0e, 0xe8, 0x8f, 0x76, 0x7a, 0x8b, 0xe6, 0xd9, 0x0e, 0xc8, 0x6f, 0xec,
	0xaf, 0x4d, 0x45, 0x07, 0x2e, 0x68, 0x24, 0xf9, 0x83, 0x7b, 0x62, 0xa5, 0x34, 0xd0, 0x20, 0x44,
	0xd1, 0x20, 0x6e, 0xcd, 0xe5, 0xc5, 0xbe, 0x66, 0xde, 0xa1, 0x66, 0xde, 0xa9, 0x66, 0xe8, 0xbd,
	0x66, 0xe8, 0xde, 0x32, 0xf4, 0x64, 0x19, 0x7a, 0xb6, 0x0c, 0xbd, 0x58, 0x86, 0xf6, 0x96, 0xa1,
	0x57, 0xcb, 0xd0, 0x9b, 0x65, 0xde, 0xc9, 0x32, 0xf4, 0x78, 0x64, 0xde, 0xfe, 0xc8, 0xbc, 0xc3,
	0x91, 0x79, 0x69, 0xdf, 0xdd, 0xf4, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x4f, 0x26, 0x1c,
	0x99, 0x01, 0x00, 0x00,
}
